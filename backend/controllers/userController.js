import userModel from "../models/userModel.js";
import jwt from 'jsonwebtoken'
import bycrpt from 'bcrypt'
import validator from  'validator'
import { response } from "express";

//login user    
const loginUser = async (req,res) => {
    const {email,password} = req.body
    try {
        const user = await userModel.findOne({email})
        if(!user){
            res.json({success:false,message:"User does not exist"})
        }
        //compares the given and original password
        const isMatch = await bycrpt.compare(password,user.password)

        //if both are not same a response is given
        if(!isMatch){
            return res.json({success:false,message:"Invalid credential"}) 
        }
        //if it matched token is created
        const token = createToken(user._id);
        res.json({success:true,token})
    } catch (error) {
        console.log(error)
        res.json({success:false,message:"User didn't exist"})
    }

}

//register user

//this id is self generated by mongodb
const createToken = (id)=>{
    //data encrypted --- stored this key in .env file
    return jwt.sign({id},process.env.JWT_SECRET)
}
const registerUser = async(req,res) =>{
    const {name,password,email} = req.body;
    try {
        //checking if user is already exists
        const exists = await userModel.findOne({email});
        if(exists){
            return res.json({success:false,message:"User already exists"})
        }
        //validating email format and strong password
        if(!validator.isEmail(email)){
            return res.json({success:false,message:"Please enter a valid Email"})
        }
        //checking for strong user password
        if(password.length < 8){
            return res.json({success:false,message:"Please enter a strong password"})
        }
        //Encryption of user password
        //hashing user password
        //this 10 can be set from 5 - 15 (low -->high Encryptions) (less time --- more time)
        const salt = await bycrpt.genSalt(10)
        //password and encryption are mapped
        const hashedPassword = await bycrpt.hash(password,salt);

        const newUser = new userModel({
            name:name,
            email:email,
            password:hashedPassword
        })
        const user = await newUser.save()
        const token = createToken(user._id)
        res.json({success:true,token});
    } catch (error) {
        console.log(error);
        res.json({success:false,message:"Error"})
    }
}

export {loginUser,registerUser}